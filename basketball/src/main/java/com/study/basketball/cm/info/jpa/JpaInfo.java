package com.study.basketball.cm.info.jpa;

public class JpaInfo {

	/************************************************************************
	 * ■ JPA (Java Persistence API)
	 ************************************************************************/
	/*
	 * - Java 에서 ORM 기술 표준으로 사용하는 인터페이스 모음
	 * - Java 어플리케이션에서 RDB 사용 방식을 정의한 인터페이스
	 * - 인터페이스 이므로 Hibernate, OpenJPA 등에서 구현함
	 * - 매핑된 관계를 기반으로 SQL을 생성하고 실행하는데, 개발자는 어떻게 실행될지 생각만 하면 된다.
	 * 
	 * ▷ 기능
	 * - 반복적인 CRUD SQL을 처리해준다.
	 * - JOIN : 객체의 상속구조를 통하여 구현
	 * - 수정
	 *  > 별도의 수정 메소드를 지원하지 않음
	 *  > 객체의 값을 수정하고 Commit 시, UPDATE문 작성
	 * 
	 * ▷ 참고
	 * - Spring에서 사용하는 것은 Spring Data JPA 프레임워크로 JPA 사용을 지원하는 모듈이지 JPA가 아니다.
	 * - Spring 순서
	 *  > 1. Spring Java 객체 (어플리케이션)
	 *  > 2. Spring Data JPA(Repository)
	 *  > 3. JPA
	 *  > 4. Hibernate
	 *  > 5. JDBC
	 *  > 6. RDB
	 * 
	 * ▷ 장점
	 * - SQL문이 아닌 객체를 통해 DB를 조작할 수 있어, 개발자는 비즈니스 로직에만 집중할 수 있음 (Query 자동 생성)
	 * - 객체 지향적인 코드 작성이 가능하다.
	 * - 매핑 정보가 클래스에 정의되어 있어 ERD를 보는 의존도가 낮아지고 유지보수와 리팩토링에 유리
	 * - DB 마이그레이션 시, 쿼리 수정이 필요없다.
	 * 
	 * ▷ 단점
	 * - 프로젝트 규모가 크고 설계가 복잡한 경우, 속도 저하 및 일관성이 무너지는 문제가 발생할 수 있음
	 * - 복잡하고 무거운 쿼리는 튜닝이 필요하고 결국 SQL문을 작성해야 할수 있음
	 */

	/************************************************************************
	 * ■ ORM (Object-Relational Mapping)
	 ************************************************************************/
	/*
	 * - 어플리케이션 객체와 RDB 테이블을 매핑하는 것을 의미
	 * - 기술적으로는 어플리케이션 객체를 RDB 테이블에 자동으로 영속화 시켜주는 것을 의미
	 */
	
	/************************************************************************
	 * ■ Hibernate
	 ************************************************************************/
	/*
	 * - JPA 인터페이스 실제 구현체
	 * - 내부적으로 JDBC API 사용
	 * - 메소드 호출만으로 쿼리 작성 및 수행 가능 (메소드 호출 방식은 직접 작성한 SQL보단 성능상 좋지 않음)
	 * - 테이블 컬럼이 변경되었을 때, 테이블 관련된 DAO, SQL, 결과 대신 수행 (유지보수 좋음)
	 * - JPQL, NativeQuery 지원 (메소드 호출 쿼리는 한계가 있음 EX. 복잡한 통계 쿼리 등)
	 * - SQL의 의존되지 않는 객체 중심 개발 가능
	 */	
	
	/************************************************************************
	 * ■ Spring Data JPA
	 ************************************************************************/
	/* 
	 * - ORM Framework
	 * - Spring에서 JPA 사용을 지원하는 모듈
	 * - JpaRepository 제공
	 * - JPA에 접근하기 위한 추상화 구현 개념 
	 * - GenericDao 구현체 제공 : JPA 쿼리 생성
	 * 
	 * [Note]
	 * ※ 반드시 Hibernate와 같은 JPA구현체 필요
	 */
}
